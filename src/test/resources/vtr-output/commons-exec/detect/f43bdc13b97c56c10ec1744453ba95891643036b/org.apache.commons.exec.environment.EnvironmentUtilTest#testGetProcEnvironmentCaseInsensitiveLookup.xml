<?xml version="1.0" encoding="UTF-8"?>
<ModifiedTestCaseNodes><RevisedNodes><Node startPosition="2371" length="1259" class="org.eclipse.jdt.core.dom.MethodDeclaration">/** 
 * On Windows platforms test that accessing environment variables can be done in a case-insensitive way, e.g. &amp;quot;PATH&amp;quot;, &amp;quot;Path&amp;quot; and &amp;quot;path&amp;quot; would reference the same environment variable.
 */
public void testGetProcEnvironmentCaseInsensitiveLookup() throws IOException {
  if (!OS.isFamilyWindows()) {
    return;
  }
  Map procEnvironment=EnvironmentUtil.getProcEnvironment();
  for (Iterator it=procEnvironment.keySet().iterator(); it.hasNext(); ) {
    String variable=(String)it.next();
    String value=(String)procEnvironment.get(variable);
    assertEquals(value,procEnvironment.get(variable.toLowerCase(Locale.ENGLISH)));
    assertEquals(value,procEnvironment.get(variable.toUpperCase(Locale.ENGLISH)));
  }
  EnvironmentUtil.addVariableToEnvironment(procEnvironment,&amp;quot;foo=bar&amp;quot;);
  assertEquals(&amp;quot;bar&amp;quot;,procEnvironment.get(&amp;quot;FOO&amp;quot;));
  assertEquals(&amp;quot;bar&amp;quot;,procEnvironment.get(&amp;quot;Foo&amp;quot;));
  assertEquals(&amp;quot;bar&amp;quot;,procEnvironment.get(&amp;quot;foo&amp;quot;));
}
</Node><Node startPosition="2371" length="212" class="org.eclipse.jdt.core.dom.Javadoc">/** 
 * On Windows platforms test that accessing environment variables can be done in a case-insensitive way, e.g. &amp;quot;PATH&amp;quot;, &amp;quot;Path&amp;quot; and &amp;quot;path&amp;quot; would reference the same environment variable.
 */
</Node><Node startPosition="2382" length="193" class="org.eclipse.jdt.core.dom.TagElement">
 * On Windows platforms test that accessing environment variables can be done in a case-insensitive way, e.g. &amp;quot;PATH&amp;quot;, &amp;quot;Path&amp;quot; and &amp;quot;path&amp;quot; would reference the same environment variable.</Node><Node startPosition="2382" length="62" class="org.eclipse.jdt.core.dom.TextElement">On Windows platforms test that accessing environment variables</Node><Node startPosition="2452" length="62" class="org.eclipse.jdt.core.dom.TextElement">can be done in a case-insensitive way, e.g. &amp;quot;PATH&amp;quot;, &amp;quot;Path&amp;quot; and</Node><Node startPosition="2522" length="53" class="org.eclipse.jdt.core.dom.TextElement">&amp;quot;path&amp;quot; would reference the same environment variable.</Node><Node startPosition="2588" length="6" class="org.eclipse.jdt.core.dom.Modifier">public</Node><Node startPosition="2595" length="4" class="org.eclipse.jdt.core.dom.PrimitiveType">void</Node><Node startPosition="2600" length="43" class="org.eclipse.jdt.core.dom.SimpleName">testGetProcEnvironmentCaseInsensitiveLookup</Node><Node startPosition="2653" length="11" class="org.eclipse.jdt.core.dom.SimpleType">IOException</Node><Node startPosition="2653" length="11" class="org.eclipse.jdt.core.dom.SimpleName">IOException</Node><Node startPosition="2665" length="965" class="org.eclipse.jdt.core.dom.Block">{
  if (!OS.isFamilyWindows()) {
    return;
  }
  Map procEnvironment=EnvironmentUtil.getProcEnvironment();
  for (Iterator it=procEnvironment.keySet().iterator(); it.hasNext(); ) {
    String variable=(String)it.next();
    String value=(String)procEnvironment.get(variable);
    assertEquals(value,procEnvironment.get(variable.toLowerCase(Locale.ENGLISH)));
    assertEquals(value,procEnvironment.get(variable.toUpperCase(Locale.ENGLISH)));
  }
  EnvironmentUtil.addVariableToEnvironment(procEnvironment,&amp;quot;foo=bar&amp;quot;);
  assertEquals(&amp;quot;bar&amp;quot;,procEnvironment.get(&amp;quot;FOO&amp;quot;));
  assertEquals(&amp;quot;bar&amp;quot;,procEnvironment.get(&amp;quot;Foo&amp;quot;));
  assertEquals(&amp;quot;bar&amp;quot;,procEnvironment.get(&amp;quot;foo&amp;quot;));
}
</Node><Node startPosition="2722" length="58" class="org.eclipse.jdt.core.dom.IfStatement">if (!OS.isFamilyWindows()) {
  return;
}
</Node><Node startPosition="2726" length="21" class="org.eclipse.jdt.core.dom.PrefixExpression">!OS.isFamilyWindows()</Node><Node startPosition="2727" length="20" class="org.eclipse.jdt.core.dom.MethodInvocation">OS.isFamilyWindows()</Node><Node startPosition="2727" length="2" class="org.eclipse.jdt.core.dom.SimpleName">OS</Node><Node startPosition="2730" length="15" class="org.eclipse.jdt.core.dom.SimpleName">isFamilyWindows</Node><Node startPosition="2749" length="31" class="org.eclipse.jdt.core.dom.Block">{
  return;
}
</Node><Node startPosition="2763" length="7" class="org.eclipse.jdt.core.dom.ReturnStatement">return;
</Node><Node startPosition="2865" length="59" class="org.eclipse.jdt.core.dom.VariableDeclarationStatement">Map procEnvironment=EnvironmentUtil.getProcEnvironment();
</Node><Node startPosition="2865" length="3" class="org.eclipse.jdt.core.dom.SimpleType">Map</Node><Node startPosition="2865" length="3" class="org.eclipse.jdt.core.dom.SimpleName">Map</Node><Node startPosition="2869" length="54" class="org.eclipse.jdt.core.dom.VariableDeclarationFragment">procEnvironment=EnvironmentUtil.getProcEnvironment()</Node><Node startPosition="2869" length="15" class="org.eclipse.jdt.core.dom.SimpleName">procEnvironment</Node><Node startPosition="2887" length="36" class="org.eclipse.jdt.core.dom.MethodInvocation">EnvironmentUtil.getProcEnvironment()</Node><Node startPosition="2887" length="15" class="org.eclipse.jdt.core.dom.SimpleName">EnvironmentUtil</Node><Node startPosition="2903" length="18" class="org.eclipse.jdt.core.dom.SimpleName">getProcEnvironment</Node><Node startPosition="2933" length="383" class="org.eclipse.jdt.core.dom.ForStatement">for (Iterator it=procEnvironment.keySet().iterator(); it.hasNext(); ) {
  String variable=(String)it.next();
  String value=(String)procEnvironment.get(variable);
  assertEquals(value,procEnvironment.get(variable.toLowerCase(Locale.ENGLISH)));
  assertEquals(value,procEnvironment.get(variable.toUpperCase(Locale.ENGLISH)));
}
</Node><Node startPosition="2938" length="49" class="org.eclipse.jdt.core.dom.VariableDeclarationExpression">Iterator it=procEnvironment.keySet().iterator()</Node><Node startPosition="2938" length="8" class="org.eclipse.jdt.core.dom.SimpleType">Iterator</Node><Node startPosition="2938" length="8" class="org.eclipse.jdt.core.dom.SimpleName">Iterator</Node><Node startPosition="2947" length="40" class="org.eclipse.jdt.core.dom.VariableDeclarationFragment">it=procEnvironment.keySet().iterator()</Node><Node startPosition="2947" length="2" class="org.eclipse.jdt.core.dom.SimpleName">it</Node><Node startPosition="2952" length="35" class="org.eclipse.jdt.core.dom.MethodInvocation">procEnvironment.keySet().iterator()</Node><Node startPosition="2952" length="24" class="org.eclipse.jdt.core.dom.MethodInvocation">procEnvironment.keySet()</Node><Node startPosition="2952" length="15" class="org.eclipse.jdt.core.dom.SimpleName">procEnvironment</Node><Node startPosition="2968" length="6" class="org.eclipse.jdt.core.dom.SimpleName">keySet</Node><Node startPosition="2977" length="8" class="org.eclipse.jdt.core.dom.SimpleName">iterator</Node><Node startPosition="2989" length="12" class="org.eclipse.jdt.core.dom.MethodInvocation">it.hasNext()</Node><Node startPosition="2989" length="2" class="org.eclipse.jdt.core.dom.SimpleName">it</Node><Node startPosition="2992" length="7" class="org.eclipse.jdt.core.dom.SimpleName">hasNext</Node><Node startPosition="3004" length="312" class="org.eclipse.jdt.core.dom.Block">{
  String variable=(String)it.next();
  String value=(String)procEnvironment.get(variable);
  assertEquals(value,procEnvironment.get(variable.toLowerCase(Locale.ENGLISH)));
  assertEquals(value,procEnvironment.get(variable.toUpperCase(Locale.ENGLISH)));
}
</Node><Node startPosition="3018" length="37" class="org.eclipse.jdt.core.dom.VariableDeclarationStatement">String variable=(String)it.next();
</Node><Node startPosition="3018" length="6" class="org.eclipse.jdt.core.dom.SimpleType">String</Node><Node startPosition="3018" length="6" class="org.eclipse.jdt.core.dom.SimpleName">String</Node><Node startPosition="3025" length="29" class="org.eclipse.jdt.core.dom.VariableDeclarationFragment">variable=(String)it.next()</Node><Node startPosition="3025" length="8" class="org.eclipse.jdt.core.dom.SimpleName">variable</Node><Node startPosition="3036" length="18" class="org.eclipse.jdt.core.dom.CastExpression">(String)it.next()</Node><Node startPosition="3037" length="6" class="org.eclipse.jdt.core.dom.SimpleType">String</Node><Node startPosition="3037" length="6" class="org.eclipse.jdt.core.dom.SimpleName">String</Node><Node startPosition="3045" length="9" class="org.eclipse.jdt.core.dom.MethodInvocation">it.next()</Node><Node startPosition="3045" length="2" class="org.eclipse.jdt.core.dom.SimpleName">it</Node><Node startPosition="3048" length="4" class="org.eclipse.jdt.core.dom.SimpleName">next</Node><Node startPosition="3068" length="54" class="org.eclipse.jdt.core.dom.VariableDeclarationStatement">String value=(String)procEnvironment.get(variable);
</Node><Node startPosition="3068" length="6" class="org.eclipse.jdt.core.dom.SimpleType">String</Node><Node startPosition="3068" length="6" class="org.eclipse.jdt.core.dom.SimpleName">String</Node><Node startPosition="3075" length="46" class="org.eclipse.jdt.core.dom.VariableDeclarationFragment">value=(String)procEnvironment.get(variable)</Node><Node startPosition="3075" length="5" class="org.eclipse.jdt.core.dom.SimpleName">value</Node><Node startPosition="3083" length="38" class="org.eclipse.jdt.core.dom.CastExpression">(String)procEnvironment.get(variable)</Node><Node startPosition="3084" length="6" class="org.eclipse.jdt.core.dom.SimpleType">String</Node><Node startPosition="3084" length="6" class="org.eclipse.jdt.core.dom.SimpleName">String</Node><Node startPosition="3092" length="29" class="org.eclipse.jdt.core.dom.MethodInvocation">procEnvironment.get(variable)</Node><Node startPosition="3092" length="15" class="org.eclipse.jdt.core.dom.SimpleName">procEnvironment</Node><Node startPosition="3108" length="3" class="org.eclipse.jdt.core.dom.SimpleName">get</Node><Node startPosition="3112" length="8" class="org.eclipse.jdt.core.dom.SimpleName">variable</Node><Node startPosition="3135" length="79" class="org.eclipse.jdt.core.dom.ExpressionStatement">assertEquals(value,procEnvironment.get(variable.toLowerCase(Locale.ENGLISH)));
</Node><Node startPosition="3135" length="78" class="org.eclipse.jdt.core.dom.MethodInvocation">assertEquals(value,procEnvironment.get(variable.toLowerCase(Locale.ENGLISH)))</Node><Node startPosition="3135" length="12" class="org.eclipse.jdt.core.dom.SimpleName">assertEquals</Node><Node startPosition="3148" length="5" class="org.eclipse.jdt.core.dom.SimpleName">value</Node><Node startPosition="3155" length="57" class="org.eclipse.jdt.core.dom.MethodInvocation">procEnvironment.get(variable.toLowerCase(Locale.ENGLISH))</Node><Node startPosition="3155" length="15" class="org.eclipse.jdt.core.dom.SimpleName">procEnvironment</Node><Node startPosition="3171" length="3" class="org.eclipse.jdt.core.dom.SimpleName">get</Node><Node startPosition="3175" length="36" class="org.eclipse.jdt.core.dom.MethodInvocation">variable.toLowerCase(Locale.ENGLISH)</Node><Node startPosition="3175" length="8" class="org.eclipse.jdt.core.dom.SimpleName">variable</Node><Node startPosition="3184" length="11" class="org.eclipse.jdt.core.dom.SimpleName">toLowerCase</Node><Node startPosition="3196" length="14" class="org.eclipse.jdt.core.dom.QualifiedName">Locale.ENGLISH</Node><Node startPosition="3196" length="6" class="org.eclipse.jdt.core.dom.SimpleName">Locale</Node><Node startPosition="3203" length="7" class="org.eclipse.jdt.core.dom.SimpleName">ENGLISH</Node><Node startPosition="3227" length="79" class="org.eclipse.jdt.core.dom.ExpressionStatement">assertEquals(value,procEnvironment.get(variable.toUpperCase(Locale.ENGLISH)));
</Node><Node startPosition="3227" length="78" class="org.eclipse.jdt.core.dom.MethodInvocation">assertEquals(value,procEnvironment.get(variable.toUpperCase(Locale.ENGLISH)))</Node><Node startPosition="3227" length="12" class="org.eclipse.jdt.core.dom.SimpleName">assertEquals</Node><Node startPosition="3240" length="5" class="org.eclipse.jdt.core.dom.SimpleName">value</Node><Node startPosition="3247" length="57" class="org.eclipse.jdt.core.dom.MethodInvocation">procEnvironment.get(variable.toUpperCase(Locale.ENGLISH))</Node><Node startPosition="3247" length="15" class="org.eclipse.jdt.core.dom.SimpleName">procEnvironment</Node><Node startPosition="3263" length="3" class="org.eclipse.jdt.core.dom.SimpleName">get</Node><Node startPosition="3267" length="36" class="org.eclipse.jdt.core.dom.MethodInvocation">variable.toUpperCase(Locale.ENGLISH)</Node><Node startPosition="3267" length="8" class="org.eclipse.jdt.core.dom.SimpleName">variable</Node><Node startPosition="3276" length="11" class="org.eclipse.jdt.core.dom.SimpleName">toUpperCase</Node><Node startPosition="3288" length="14" class="org.eclipse.jdt.core.dom.QualifiedName">Locale.ENGLISH</Node><Node startPosition="3288" length="6" class="org.eclipse.jdt.core.dom.SimpleName">Locale</Node><Node startPosition="3295" length="7" class="org.eclipse.jdt.core.dom.SimpleName">ENGLISH</Node><Node startPosition="3382" length="71" class="org.eclipse.jdt.core.dom.ExpressionStatement">EnvironmentUtil.addVariableToEnvironment(procEnvironment,&amp;quot;foo=bar&amp;quot;);
</Node><Node startPosition="3382" length="70" class="org.eclipse.jdt.core.dom.MethodInvocation">EnvironmentUtil.addVariableToEnvironment(procEnvironment,&amp;quot;foo=bar&amp;quot;)</Node><Node startPosition="3382" length="15" class="org.eclipse.jdt.core.dom.SimpleName">EnvironmentUtil</Node><Node startPosition="3398" length="24" class="org.eclipse.jdt.core.dom.SimpleName">addVariableToEnvironment</Node><Node startPosition="3424" length="15" class="org.eclipse.jdt.core.dom.SimpleName">procEnvironment</Node><Node startPosition="3441" length="9" class="org.eclipse.jdt.core.dom.StringLiteral">&amp;quot;foo=bar&amp;quot;</Node><Node startPosition="3462" length="48" class="org.eclipse.jdt.core.dom.ExpressionStatement">assertEquals(&amp;quot;bar&amp;quot;,procEnvironment.get(&amp;quot;FOO&amp;quot;));
</Node><Node startPosition="3462" length="47" class="org.eclipse.jdt.core.dom.MethodInvocation">assertEquals(&amp;quot;bar&amp;quot;,procEnvironment.get(&amp;quot;FOO&amp;quot;))</Node><Node startPosition="3462" length="12" class="org.eclipse.jdt.core.dom.SimpleName">assertEquals</Node><Node startPosition="3475" length="5" class="org.eclipse.jdt.core.dom.StringLiteral">&amp;quot;bar&amp;quot;</Node><Node startPosition="3482" length="26" class="org.eclipse.jdt.core.dom.MethodInvocation">procEnvironment.get(&amp;quot;FOO&amp;quot;)</Node><Node startPosition="3482" length="15" class="org.eclipse.jdt.core.dom.SimpleName">procEnvironment</Node><Node startPosition="3498" length="3" class="org.eclipse.jdt.core.dom.SimpleName">get</Node><Node startPosition="3502" length="5" class="org.eclipse.jdt.core.dom.StringLiteral">&amp;quot;FOO&amp;quot;</Node><Node startPosition="3519" length="48" class="org.eclipse.jdt.core.dom.ExpressionStatement">assertEquals(&amp;quot;bar&amp;quot;,procEnvironment.get(&amp;quot;Foo&amp;quot;));
</Node><Node startPosition="3519" length="47" class="org.eclipse.jdt.core.dom.MethodInvocation">assertEquals(&amp;quot;bar&amp;quot;,procEnvironment.get(&amp;quot;Foo&amp;quot;))</Node><Node startPosition="3519" length="12" class="org.eclipse.jdt.core.dom.SimpleName">assertEquals</Node><Node startPosition="3532" length="5" class="org.eclipse.jdt.core.dom.StringLiteral">&amp;quot;bar&amp;quot;</Node><Node startPosition="3539" length="26" class="org.eclipse.jdt.core.dom.MethodInvocation">procEnvironment.get(&amp;quot;Foo&amp;quot;)</Node><Node startPosition="3539" length="15" class="org.eclipse.jdt.core.dom.SimpleName">procEnvironment</Node><Node startPosition="3555" length="3" class="org.eclipse.jdt.core.dom.SimpleName">get</Node><Node startPosition="3559" length="5" class="org.eclipse.jdt.core.dom.StringLiteral">&amp;quot;Foo&amp;quot;</Node><Node startPosition="3576" length="48" class="org.eclipse.jdt.core.dom.ExpressionStatement">assertEquals(&amp;quot;bar&amp;quot;,procEnvironment.get(&amp;quot;foo&amp;quot;));
</Node><Node startPosition="3576" length="47" class="org.eclipse.jdt.core.dom.MethodInvocation">assertEquals(&amp;quot;bar&amp;quot;,procEnvironment.get(&amp;quot;foo&amp;quot;))</Node><Node startPosition="3576" length="12" class="org.eclipse.jdt.core.dom.SimpleName">assertEquals</Node><Node startPosition="3589" length="5" class="org.eclipse.jdt.core.dom.StringLiteral">&amp;quot;bar&amp;quot;</Node><Node startPosition="3596" length="26" class="org.eclipse.jdt.core.dom.MethodInvocation">procEnvironment.get(&amp;quot;foo&amp;quot;)</Node><Node startPosition="3596" length="15" class="org.eclipse.jdt.core.dom.SimpleName">procEnvironment</Node><Node startPosition="3612" length="3" class="org.eclipse.jdt.core.dom.SimpleName">get</Node><Node startPosition="3616" length="5" class="org.eclipse.jdt.core.dom.StringLiteral">&amp;quot;foo&amp;quot;</Node></RevisedNodes></ModifiedTestCaseNodes>