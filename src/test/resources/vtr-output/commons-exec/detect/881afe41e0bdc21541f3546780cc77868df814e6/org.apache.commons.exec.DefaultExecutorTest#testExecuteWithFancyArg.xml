<?xml version="1.0" encoding="UTF-8"?>
<ModifiedTestCaseNodes><RevisedNodes><Node startPosition="12469" length="443" class="org.eclipse.jdt.core.dom.MethodDeclaration">/** 
 * Invoke the test using some fancy arguments.
 * @throws Exception the test failed
 */
public void testExecuteWithFancyArg() throws Exception {
  CommandLine cl=new CommandLine(testScript);
  cl.addArgument(&amp;quot;test $;`(0)[1]{2}&amp;quot;);
  int exitValue=exec.execute(cl);
  assertTrue(baos.toString().trim().indexOf(&amp;quot;test $;`(0)[1]{2}&amp;quot;) &amp;gt; 0);
  assertFalse(exec.isFailure(exitValue));
}
</Node><Node startPosition="12469" length="110" class="org.eclipse.jdt.core.dom.Javadoc">/** 
 * Invoke the test using some fancy arguments.
 * @throws Exception the test failed
 */
</Node><Node startPosition="12480" length="43" class="org.eclipse.jdt.core.dom.TagElement">
 * Invoke the test using some fancy arguments.</Node><Node startPosition="12480" length="43" class="org.eclipse.jdt.core.dom.TextElement">Invoke the test using some fancy arguments.</Node><Node startPosition="12538" length="33" class="org.eclipse.jdt.core.dom.TagElement">
 * @throws Exception the test failed</Node><Node startPosition="12546" length="9" class="org.eclipse.jdt.core.dom.SimpleName">Exception</Node><Node startPosition="12555" length="16" class="org.eclipse.jdt.core.dom.TextElement"> the test failed</Node><Node startPosition="12584" length="6" class="org.eclipse.jdt.core.dom.Modifier">public</Node><Node startPosition="12591" length="4" class="org.eclipse.jdt.core.dom.PrimitiveType">void</Node><Node startPosition="12596" length="23" class="org.eclipse.jdt.core.dom.SimpleName">testExecuteWithFancyArg</Node><Node startPosition="12629" length="9" class="org.eclipse.jdt.core.dom.SimpleType">Exception</Node><Node startPosition="12629" length="9" class="org.eclipse.jdt.core.dom.SimpleName">Exception</Node><Node startPosition="12639" length="273" class="org.eclipse.jdt.core.dom.Block">{
  CommandLine cl=new CommandLine(testScript);
  cl.addArgument(&amp;quot;test $;`(0)[1]{2}&amp;quot;);
  int exitValue=exec.execute(cl);
  assertTrue(baos.toString().trim().indexOf(&amp;quot;test $;`(0)[1]{2}&amp;quot;) &amp;gt; 0);
  assertFalse(exec.isFailure(exitValue));
}
</Node><Node startPosition="12649" length="45" class="org.eclipse.jdt.core.dom.VariableDeclarationStatement">CommandLine cl=new CommandLine(testScript);
</Node><Node startPosition="12649" length="11" class="org.eclipse.jdt.core.dom.SimpleType">CommandLine</Node><Node startPosition="12649" length="11" class="org.eclipse.jdt.core.dom.SimpleName">CommandLine</Node><Node startPosition="12661" length="32" class="org.eclipse.jdt.core.dom.VariableDeclarationFragment">cl=new CommandLine(testScript)</Node><Node startPosition="12661" length="2" class="org.eclipse.jdt.core.dom.SimpleName">cl</Node><Node startPosition="12666" length="27" class="org.eclipse.jdt.core.dom.ClassInstanceCreation">new CommandLine(testScript)</Node><Node startPosition="12670" length="11" class="org.eclipse.jdt.core.dom.SimpleType">CommandLine</Node><Node startPosition="12670" length="11" class="org.eclipse.jdt.core.dom.SimpleName">CommandLine</Node><Node startPosition="12682" length="10" class="org.eclipse.jdt.core.dom.SimpleName">testScript</Node><Node startPosition="12703" length="36" class="org.eclipse.jdt.core.dom.ExpressionStatement">cl.addArgument(&amp;quot;test $;`(0)[1]{2}&amp;quot;);
</Node><Node startPosition="12703" length="35" class="org.eclipse.jdt.core.dom.MethodInvocation">cl.addArgument(&amp;quot;test $;`(0)[1]{2}&amp;quot;)</Node><Node startPosition="12703" length="2" class="org.eclipse.jdt.core.dom.SimpleName">cl</Node><Node startPosition="12706" length="11" class="org.eclipse.jdt.core.dom.SimpleName">addArgument</Node><Node startPosition="12718" length="19" class="org.eclipse.jdt.core.dom.StringLiteral">&amp;quot;test $;`(0)[1]{2}&amp;quot;</Node><Node startPosition="12748" length="33" class="org.eclipse.jdt.core.dom.VariableDeclarationStatement">int exitValue=exec.execute(cl);
</Node><Node startPosition="12748" length="3" class="org.eclipse.jdt.core.dom.PrimitiveType">int</Node><Node startPosition="12752" length="28" class="org.eclipse.jdt.core.dom.VariableDeclarationFragment">exitValue=exec.execute(cl)</Node><Node startPosition="12752" length="9" class="org.eclipse.jdt.core.dom.SimpleName">exitValue</Node><Node startPosition="12764" length="16" class="org.eclipse.jdt.core.dom.MethodInvocation">exec.execute(cl)</Node><Node startPosition="12764" length="4" class="org.eclipse.jdt.core.dom.SimpleName">exec</Node><Node startPosition="12769" length="7" class="org.eclipse.jdt.core.dom.SimpleName">execute</Node><Node startPosition="12777" length="2" class="org.eclipse.jdt.core.dom.SimpleName">cl</Node><Node startPosition="12790" length="68" class="org.eclipse.jdt.core.dom.ExpressionStatement">assertTrue(baos.toString().trim().indexOf(&amp;quot;test $;`(0)[1]{2}&amp;quot;) &amp;gt; 0);
</Node><Node startPosition="12790" length="67" class="org.eclipse.jdt.core.dom.MethodInvocation">assertTrue(baos.toString().trim().indexOf(&amp;quot;test $;`(0)[1]{2}&amp;quot;) &amp;gt; 0)</Node><Node startPosition="12790" length="10" class="org.eclipse.jdt.core.dom.SimpleName">assertTrue</Node><Node startPosition="12801" length="55" class="org.eclipse.jdt.core.dom.InfixExpression">baos.toString().trim().indexOf(&amp;quot;test $;`(0)[1]{2}&amp;quot;) &amp;gt; 0</Node><Node startPosition="12801" length="51" class="org.eclipse.jdt.core.dom.MethodInvocation">baos.toString().trim().indexOf(&amp;quot;test $;`(0)[1]{2}&amp;quot;)</Node><Node startPosition="12801" length="22" class="org.eclipse.jdt.core.dom.MethodInvocation">baos.toString().trim()</Node><Node startPosition="12801" length="15" class="org.eclipse.jdt.core.dom.MethodInvocation">baos.toString()</Node><Node startPosition="12801" length="4" class="org.eclipse.jdt.core.dom.SimpleName">baos</Node><Node startPosition="12806" length="8" class="org.eclipse.jdt.core.dom.SimpleName">toString</Node><Node startPosition="12817" length="4" class="org.eclipse.jdt.core.dom.SimpleName">trim</Node><Node startPosition="12824" length="7" class="org.eclipse.jdt.core.dom.SimpleName">indexOf</Node><Node startPosition="12832" length="19" class="org.eclipse.jdt.core.dom.StringLiteral">&amp;quot;test $;`(0)[1]{2}&amp;quot;</Node><Node startPosition="12855" length="1" class="org.eclipse.jdt.core.dom.NumberLiteral">0</Node><Node startPosition="12867" length="39" class="org.eclipse.jdt.core.dom.ExpressionStatement">assertFalse(exec.isFailure(exitValue));
</Node><Node startPosition="12867" length="38" class="org.eclipse.jdt.core.dom.MethodInvocation">assertFalse(exec.isFailure(exitValue))</Node><Node startPosition="12867" length="11" class="org.eclipse.jdt.core.dom.SimpleName">assertFalse</Node><Node startPosition="12879" length="25" class="org.eclipse.jdt.core.dom.MethodInvocation">exec.isFailure(exitValue)</Node><Node startPosition="12879" length="4" class="org.eclipse.jdt.core.dom.SimpleName">exec</Node><Node startPosition="12884" length="9" class="org.eclipse.jdt.core.dom.SimpleName">isFailure</Node><Node startPosition="12894" length="9" class="org.eclipse.jdt.core.dom.SimpleName">exitValue</Node></RevisedNodes></ModifiedTestCaseNodes>